<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Task</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Add in your layout.ejs or index.ejs -->
    <style>
        #toast-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 9999;
        }
        .toast {
            background-color: #333;
            color: #fff;
            padding: 10px 20px;
            margin-bottom: 10px;
            border-radius: 5px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }
      </style>
      

</head>
<body>
    <div id="toast-container"></div>
    <div class="container mt-5">
        <h1 class="text-center mb-4">Edit Task</h1>
        <div class="row">
            <div class="col-md-7">
                <!-- Form to Edit Task -->
                <div class="card mb-4">
                    <div class="card-body">
                        <h5 class="card-title">Update Task</h5>
                        <form id="editTaskForm">
                            <div class="mb-3">
                                <label for="taskTitle" class="form-label">Title</label>
                                <input type="text" id="taskTitle" class="form-control" required>
                            </div>
                            <div class="mb-3">
                                <label for="taskDescription" class="form-label">Description</label>
                                <textarea id="taskDescription" class="form-control" required></textarea>
                            </div>
                            <div class="mb-3">
                                <label for="dueDate" class="form-label">Due Date</label>
                                <input type="date" id="dueDate" class="form-control" required>
                            </div>
                            <div class="mb-3">
                                <label for="taskStatus" class="form-label">Status</label>
                                <select id="taskStatus" class="form-control" required>
                                    <option value="To Do">To Do</option>
                                    <option value="In Progress">In Progress</option>
                                    <option value="Done">Done</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="assignedTo" class="form-label">Assign To</label>
                                <select id="assignedTo" class="form-control" required>
                                    <!-- Users will be loaded dynamically here -->
                                </select>
                            </div>
                            <button type="button" class="btn btn-primary" id="updateStatusBtn">Update Task</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
<script>
    const userId = localStorage.getItem('userId');
    const socket = io();  // Initialize Socket.IO

    // Listen for task updates
    socket.on('taskUpdated', (data) => {
        console.log(data.message);
        alert(data.message);

        // Check if the toast container already exists
        let toastContainer = document.getElementById('toast-container');
        if (!toastContainer) {
            toastContainer = document.createElement('div');
            toastContainer.id = 'toast-container';
            toastContainer.style.position = 'fixed';
            toastContainer.style.top = '20px';
            toastContainer.style.right = '20px';
            toastContainer.style.zIndex = '9999';
            document.body.appendChild(toastContainer);
        }

        // Create a new toast
        const toast = document.createElement('div');
        toast.className = 'toast';
        toast.style.backgroundColor = '#333';
        toast.style.color = '#fff';
        toast.style.padding = '10px 15px';
        toast.style.marginBottom = '10px';
        toast.style.borderRadius = '5px';
        toast.style.boxShadow = '0 2px 10px rgba(0,0,0,0.1)';
        toast.style.opacity = '0';
        toast.style.transition = 'opacity 0.3s ease-in-out';

        // Set the message
        toast.innerText = data.message;

        // Append the toast to the container
        toastContainer.appendChild(toast);

        // Fade in the toast
        setTimeout(() => {
            toast.style.opacity = '1';
        }, 100);

        // Remove the toast after 5 seconds
        setTimeout(() => {
            toast.style.opacity = '0';
            setTimeout(() => {
                toast.remove();
            }, 300);
        }, 5000);
    });


  
    socket.emit('userConnected', userId);
    // Listen for task deletions
    socket.on('taskDeleted', (data) => {
        console.log(data.message);  // Handle task deletion notification
    });
</script>

    <script>
        
        async function fetchTaskDetails(taskId) {
            const token = localStorage.getItem('auth-token');
            try {
                const response = await fetch(`/api/tasks/${taskId}`, {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                const data = await response.json();
                const task = data.task;

                // Populate the form fields with the task data
                document.getElementById('taskTitle').value = task.title;
                document.getElementById('taskDescription').value = task.description;
                document.getElementById('dueDate').value = task.dueDate.split('T')[0]; // Assuming date format: "yyyy-mm-dd"
                document.getElementById('taskStatus').value = task.status;

                // Call the fetchUsers function to populate the "Assign To" dropdown
                await fetchUsers(task.assignedTo); // Pass assignedTo to set selected user
            } catch (error) {
                console.error('Error fetching task details:', error);
            }
        }

        async function fetchUsers(selectedUserId) {
            const token = localStorage.getItem('auth-token');
            try {
                const response = await fetch('/api/users', {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                const users = await response.json();

                const assignedToDropdown = document.getElementById('assignedTo');
                assignedToDropdown.innerHTML = '<option value="">Select a user</option>';

                users.forEach(user => {
                    const option = document.createElement('option');
                    option.value = user._id; 
                    option.textContent = user.username; 

                    // Check if the user is the one assigned to the task and set as selected
                    if (user._id === selectedUserId) {
                        option.selected = true;  // Set the selected user
                    }

                    assignedToDropdown.appendChild(option);
                });
            } catch (error) {
                console.error('Error fetching users:', error);
            }
        }

        // Submit the updated task data
        document.getElementById('editTaskForm').addEventListener('submit', async function (event) {
            event.preventDefault();

            const title = document.getElementById('taskTitle').value;
            const description = document.getElementById('taskDescription').value;
            const status = document.getElementById('taskStatus').value;
            const assignedTo = document.getElementById('assignedTo').value;
            const dueDate = document.getElementById('dueDate').value;

            const token = localStorage.getItem('auth-token');
            const taskId = window.location.pathname.split('/').pop();  // Extract task ID from the URL

            const updatedTask = { title, description, status, assignedTo, dueDate };

            try {
                const response = await fetch(`/api/tasks/${taskId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify(updatedTask)
                });

                if (response.ok) {
                    alert('Task updated successfully');
                    window.location.href = '/dashboard';  // Redirect to the dashboard after successful update
                } else {
                    const error = await response.json();
                    alert(`Error: ${error.message}`);
                }
            } catch (error) {
                console.error('Error updating task:', error);
            }
        });

        // Extract task ID from the URL and fetch task details
        const taskId = window.location.pathname.split('/').pop();
        fetchTaskDetails(taskId);

        document.getElementById('updateStatusBtn').addEventListener('click', async function() {
            const status = document.getElementById('taskStatus').value; 
            
            const token = localStorage.getItem('auth-token'); 
            
            try {
                const response = await fetch('/api/tasks/updateTaskStatus', {
                    method: 'PATCH',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify({
                        taskId, 
                        status   
                    })
                });

                const data = await response.json();
                
                if (response.ok) {
                    alert('Task status updated successfully');
                } else {
                    alert(`Error: ${data.message}`);
                }
            } catch (error) {
                console.error('Error updating task status:', error);
            }
        });
    </script>
</body>
</html>
